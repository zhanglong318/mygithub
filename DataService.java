/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wusong.hanukkah.data.service;

import com.wusong.hanukkah.data.domain.FullJudgement;
import com.wusong.hanukkah.data.domain.Label;
import com.wusong.hanukkah.data.domain.SearchResult;
import com.wusong.hanukkah.data.domain.TypeValueCondition;
import com.wusong.hanukkah.data.exception.DataException;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-12")
public class DataService {

  public interface Iface {

    public List<Label> getSearchBoxLabels(String searchWord) throws DataException, org.apache.thrift.TException;

    public SearchResult search4Judgements(List<TypeValueCondition> typeValueConditions, int startIndex, int countPerPage, int sortType) throws DataException, org.apache.thrift.TException;

    public FullJudgement getFullJudgement(String id) throws DataException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSearchBoxLabels(String searchWord, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void search4Judgements(List<TypeValueCondition> typeValueConditions, int startIndex, int countPerPage, int sortType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFullJudgement(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Label> getSearchBoxLabels(String searchWord) throws DataException, org.apache.thrift.TException
    {
      send_getSearchBoxLabels(searchWord);
      return recv_getSearchBoxLabels();
    }

    public void send_getSearchBoxLabels(String searchWord) throws org.apache.thrift.TException
    {
      getSearchBoxLabels_args args = new getSearchBoxLabels_args();
      args.setSearchWord(searchWord);
      sendBase("getSearchBoxLabels", args);
    }

    public List<Label> recv_getSearchBoxLabels() throws DataException, org.apache.thrift.TException
    {
      getSearchBoxLabels_result result = new getSearchBoxLabels_result();
      receiveBase(result, "getSearchBoxLabels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataException != null) {
        throw result.dataException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchBoxLabels failed: unknown result");
    }

    public SearchResult search4Judgements(List<TypeValueCondition> typeValueConditions, int startIndex, int countPerPage, int sortType) throws DataException, org.apache.thrift.TException
    {
      send_search4Judgements(typeValueConditions, startIndex, countPerPage, sortType);
      return recv_search4Judgements();
    }

    public void send_search4Judgements(List<TypeValueCondition> typeValueConditions, int startIndex, int countPerPage, int sortType) throws org.apache.thrift.TException
    {
      search4Judgements_args args = new search4Judgements_args();
      args.setTypeValueConditions(typeValueConditions);
      args.setStartIndex(startIndex);
      args.setCountPerPage(countPerPage);
      args.setSortType(sortType);
      sendBase("search4Judgements", args);
    }

    public SearchResult recv_search4Judgements() throws DataException, org.apache.thrift.TException
    {
      search4Judgements_result result = new search4Judgements_result();
      receiveBase(result, "search4Judgements");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataException != null) {
        throw result.dataException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "search4Judgements failed: unknown result");
    }

    public FullJudgement getFullJudgement(String id) throws DataException, org.apache.thrift.TException
    {
      send_getFullJudgement(id);
      return recv_getFullJudgement();
    }

    public void send_getFullJudgement(String id) throws org.apache.thrift.TException
    {
      getFullJudgement_args args = new getFullJudgement_args();
      args.setId(id);
      sendBase("getFullJudgement", args);
    }

    public FullJudgement recv_getFullJudgement() throws DataException, org.apache.thrift.TException
    {
      getFullJudgement_result result = new getFullJudgement_result();
      receiveBase(result, "getFullJudgement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dataException != null) {
        throw result.dataException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFullJudgement failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSearchBoxLabels(String searchWord, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchBoxLabels_call method_call = new getSearchBoxLabels_call(searchWord, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchBoxLabels_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String searchWord;
      public getSearchBoxLabels_call(String searchWord, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchWord = searchWord;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchBoxLabels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchBoxLabels_args args = new getSearchBoxLabels_args();
        args.setSearchWord(searchWord);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Label> getResult() throws DataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchBoxLabels();
      }
    }

    public void search4Judgements(List<TypeValueCondition> typeValueConditions, int startIndex, int countPerPage, int sortType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      search4Judgements_call method_call = new search4Judgements_call(typeValueConditions, startIndex, countPerPage, sortType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class search4Judgements_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TypeValueCondition> typeValueConditions;
      private int startIndex;
      private int countPerPage;
      private int sortType;
      public search4Judgements_call(List<TypeValueCondition> typeValueConditions, int startIndex, int countPerPage, int sortType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.typeValueConditions = typeValueConditions;
        this.startIndex = startIndex;
        this.countPerPage = countPerPage;
        this.sortType = sortType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("search4Judgements", org.apache.thrift.protocol.TMessageType.CALL, 0));
        search4Judgements_args args = new search4Judgements_args();
        args.setTypeValueConditions(typeValueConditions);
        args.setStartIndex(startIndex);
        args.setCountPerPage(countPerPage);
        args.setSortType(sortType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SearchResult getResult() throws DataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_search4Judgements();
      }
    }

    public void getFullJudgement(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFullJudgement_call method_call = new getFullJudgement_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFullJudgement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public getFullJudgement_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFullJudgement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFullJudgement_args args = new getFullJudgement_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FullJudgement getResult() throws DataException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFullJudgement();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSearchBoxLabels", new getSearchBoxLabels());
      processMap.put("search4Judgements", new search4Judgements());
      processMap.put("getFullJudgement", new getFullJudgement());
      return processMap;
    }

    public static class getSearchBoxLabels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchBoxLabels_args> {
      public getSearchBoxLabels() {
        super("getSearchBoxLabels");
      }

      public getSearchBoxLabels_args getEmptyArgsInstance() {
        return new getSearchBoxLabels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchBoxLabels_result getResult(I iface, getSearchBoxLabels_args args) throws org.apache.thrift.TException {
        getSearchBoxLabels_result result = new getSearchBoxLabels_result();
        try {
          result.success = iface.getSearchBoxLabels(args.searchWord);
        } catch (DataException dataException) {
          result.dataException = dataException;
        }
        return result;
      }
    }

    public static class search4Judgements<I extends Iface> extends org.apache.thrift.ProcessFunction<I, search4Judgements_args> {
      public search4Judgements() {
        super("search4Judgements");
      }

      public search4Judgements_args getEmptyArgsInstance() {
        return new search4Judgements_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public search4Judgements_result getResult(I iface, search4Judgements_args args) throws org.apache.thrift.TException {
        search4Judgements_result result = new search4Judgements_result();
        try {
          result.success = iface.search4Judgements(args.typeValueConditions, args.startIndex, args.countPerPage, args.sortType);
        } catch (DataException dataException) {
          result.dataException = dataException;
        }
        return result;
      }
    }

    public static class getFullJudgement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFullJudgement_args> {
      public getFullJudgement() {
        super("getFullJudgement");
      }

      public getFullJudgement_args getEmptyArgsInstance() {
        return new getFullJudgement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFullJudgement_result getResult(I iface, getFullJudgement_args args) throws org.apache.thrift.TException {
        getFullJudgement_result result = new getFullJudgement_result();
        try {
          result.success = iface.getFullJudgement(args.id);
        } catch (DataException dataException) {
          result.dataException = dataException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSearchBoxLabels", new getSearchBoxLabels());
      processMap.put("search4Judgements", new search4Judgements());
      processMap.put("getFullJudgement", new getFullJudgement());
      return processMap;
    }

    public static class getSearchBoxLabels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchBoxLabels_args, List<Label>> {
      public getSearchBoxLabels() {
        super("getSearchBoxLabels");
      }

      public getSearchBoxLabels_args getEmptyArgsInstance() {
        return new getSearchBoxLabels_args();
      }

      public AsyncMethodCallback<List<Label>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Label>>() { 
          public void onComplete(List<Label> o) {
            getSearchBoxLabels_result result = new getSearchBoxLabels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchBoxLabels_result result = new getSearchBoxLabels_result();
            if (e instanceof DataException) {
                        result.dataException = (DataException) e;
                        result.setDataExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchBoxLabels_args args, org.apache.thrift.async.AsyncMethodCallback<List<Label>> resultHandler) throws TException {
        iface.getSearchBoxLabels(args.searchWord,resultHandler);
      }
    }

    public static class search4Judgements<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, search4Judgements_args, SearchResult> {
      public search4Judgements() {
        super("search4Judgements");
      }

      public search4Judgements_args getEmptyArgsInstance() {
        return new search4Judgements_args();
      }

      public AsyncMethodCallback<SearchResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SearchResult>() { 
          public void onComplete(SearchResult o) {
            search4Judgements_result result = new search4Judgements_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            search4Judgements_result result = new search4Judgements_result();
            if (e instanceof DataException) {
                        result.dataException = (DataException) e;
                        result.setDataExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, search4Judgements_args args, org.apache.thrift.async.AsyncMethodCallback<SearchResult> resultHandler) throws TException {
        iface.search4Judgements(args.typeValueConditions, args.startIndex, args.countPerPage, args.sortType,resultHandler);
      }
    }

    public static class getFullJudgement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFullJudgement_args, FullJudgement> {
      public getFullJudgement() {
        super("getFullJudgement");
      }

      public getFullJudgement_args getEmptyArgsInstance() {
        return new getFullJudgement_args();
      }

      public AsyncMethodCallback<FullJudgement> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FullJudgement>() { 
          public void onComplete(FullJudgement o) {
            getFullJudgement_result result = new getFullJudgement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFullJudgement_result result = new getFullJudgement_result();
            if (e instanceof DataException) {
                        result.dataException = (DataException) e;
                        result.setDataExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFullJudgement_args args, org.apache.thrift.async.AsyncMethodCallback<FullJudgement> resultHandler) throws TException {
        iface.getFullJudgement(args.id,resultHandler);
      }
    }

  }

  public static class getSearchBoxLabels_args implements org.apache.thrift.TBase<getSearchBoxLabels_args, getSearchBoxLabels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchBoxLabels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchBoxLabels_args");

    private static final org.apache.thrift.protocol.TField SEARCH_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("searchWord", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchBoxLabels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchBoxLabels_argsTupleSchemeFactory());
    }

    public String searchWord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_WORD((short)1, "searchWord");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_WORD
            return SEARCH_WORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_WORD, new org.apache.thrift.meta_data.FieldMetaData("searchWord", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchBoxLabels_args.class, metaDataMap);
    }

    public getSearchBoxLabels_args() {
    }

    public getSearchBoxLabels_args(
      String searchWord)
    {
      this();
      this.searchWord = searchWord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchBoxLabels_args(getSearchBoxLabels_args other) {
      if (other.isSetSearchWord()) {
        this.searchWord = other.searchWord;
      }
    }

    public getSearchBoxLabels_args deepCopy() {
      return new getSearchBoxLabels_args(this);
    }

    @Override
    public void clear() {
      this.searchWord = null;
    }

    public String getSearchWord() {
      return this.searchWord;
    }

    public getSearchBoxLabels_args setSearchWord(String searchWord) {
      this.searchWord = searchWord;
      return this;
    }

    public void unsetSearchWord() {
      this.searchWord = null;
    }

    /** Returns true if field searchWord is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchWord() {
      return this.searchWord != null;
    }

    public void setSearchWordIsSet(boolean value) {
      if (!value) {
        this.searchWord = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_WORD:
        if (value == null) {
          unsetSearchWord();
        } else {
          setSearchWord((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_WORD:
        return getSearchWord();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_WORD:
        return isSetSearchWord();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchBoxLabels_args)
        return this.equals((getSearchBoxLabels_args)that);
      return false;
    }

    public boolean equals(getSearchBoxLabels_args that) {
      if (that == null)
        return false;

      boolean this_present_searchWord = true && this.isSetSearchWord();
      boolean that_present_searchWord = true && that.isSetSearchWord();
      if (this_present_searchWord || that_present_searchWord) {
        if (!(this_present_searchWord && that_present_searchWord))
          return false;
        if (!this.searchWord.equals(that.searchWord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_searchWord = true && (isSetSearchWord());
      list.add(present_searchWord);
      if (present_searchWord)
        list.add(searchWord);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchBoxLabels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSearchWord()).compareTo(other.isSetSearchWord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchWord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchWord, other.searchWord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchBoxLabels_args(");
      boolean first = true;

      sb.append("searchWord:");
      if (this.searchWord == null) {
        sb.append("null");
      } else {
        sb.append(this.searchWord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (searchWord == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'searchWord' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchBoxLabels_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchBoxLabels_argsStandardScheme getScheme() {
        return new getSearchBoxLabels_argsStandardScheme();
      }
    }

    private static class getSearchBoxLabels_argsStandardScheme extends StandardScheme<getSearchBoxLabels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchBoxLabels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_WORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchWord = iprot.readString();
                struct.setSearchWordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchBoxLabels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchWord != null) {
          oprot.writeFieldBegin(SEARCH_WORD_FIELD_DESC);
          oprot.writeString(struct.searchWord);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchBoxLabels_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchBoxLabels_argsTupleScheme getScheme() {
        return new getSearchBoxLabels_argsTupleScheme();
      }
    }

    private static class getSearchBoxLabels_argsTupleScheme extends TupleScheme<getSearchBoxLabels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchBoxLabels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.searchWord);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchBoxLabels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.searchWord = iprot.readString();
        struct.setSearchWordIsSet(true);
      }
    }

  }

  public static class getSearchBoxLabels_result implements org.apache.thrift.TBase<getSearchBoxLabels_result, getSearchBoxLabels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchBoxLabels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchBoxLabels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchBoxLabels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchBoxLabels_resultTupleSchemeFactory());
    }

    public List<Label> success; // required
    public DataException dataException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_EXCEPTION((short)1, "dataException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_EXCEPTION
            return DATA_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Label.class))));
      tmpMap.put(_Fields.DATA_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchBoxLabels_result.class, metaDataMap);
    }

    public getSearchBoxLabels_result() {
    }

    public getSearchBoxLabels_result(
      List<Label> success,
      DataException dataException)
    {
      this();
      this.success = success;
      this.dataException = dataException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchBoxLabels_result(getSearchBoxLabels_result other) {
      if (other.isSetSuccess()) {
        List<Label> __this__success = new ArrayList<Label>(other.success.size());
        for (Label other_element : other.success) {
          __this__success.add(new Label(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetDataException()) {
        this.dataException = new DataException(other.dataException);
      }
    }

    public getSearchBoxLabels_result deepCopy() {
      return new getSearchBoxLabels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Label> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Label elem) {
      if (this.success == null) {
        this.success = new ArrayList<Label>();
      }
      this.success.add(elem);
    }

    public List<Label> getSuccess() {
      return this.success;
    }

    public getSearchBoxLabels_result setSuccess(List<Label> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataException getDataException() {
      return this.dataException;
    }

    public getSearchBoxLabels_result setDataException(DataException dataException) {
      this.dataException = dataException;
      return this;
    }

    public void unsetDataException() {
      this.dataException = null;
    }

    /** Returns true if field dataException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataException() {
      return this.dataException != null;
    }

    public void setDataExceptionIsSet(boolean value) {
      if (!value) {
        this.dataException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Label>)value);
        }
        break;

      case DATA_EXCEPTION:
        if (value == null) {
          unsetDataException();
        } else {
          setDataException((DataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_EXCEPTION:
        return getDataException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_EXCEPTION:
        return isSetDataException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchBoxLabels_result)
        return this.equals((getSearchBoxLabels_result)that);
      return false;
    }

    public boolean equals(getSearchBoxLabels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataException = true && this.isSetDataException();
      boolean that_present_dataException = true && that.isSetDataException();
      if (this_present_dataException || that_present_dataException) {
        if (!(this_present_dataException && that_present_dataException))
          return false;
        if (!this.dataException.equals(that.dataException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataException = true && (isSetDataException());
      list.add(present_dataException);
      if (present_dataException)
        list.add(dataException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchBoxLabels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataException()).compareTo(other.isSetDataException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataException, other.dataException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchBoxLabels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataException:");
      if (this.dataException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchBoxLabels_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchBoxLabels_resultStandardScheme getScheme() {
        return new getSearchBoxLabels_resultStandardScheme();
      }
    }

    private static class getSearchBoxLabels_resultStandardScheme extends StandardScheme<getSearchBoxLabels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchBoxLabels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<Label>(_list144.size);
                  Label _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new Label();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataException = new DataException();
                struct.dataException.read(iprot);
                struct.setDataExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchBoxLabels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Label _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dataException != null) {
          oprot.writeFieldBegin(DATA_EXCEPTION_FIELD_DESC);
          struct.dataException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchBoxLabels_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchBoxLabels_resultTupleScheme getScheme() {
        return new getSearchBoxLabels_resultTupleScheme();
      }
    }

    private static class getSearchBoxLabels_resultTupleScheme extends TupleScheme<getSearchBoxLabels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchBoxLabels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Label _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
        if (struct.isSetDataException()) {
          struct.dataException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchBoxLabels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Label>(_list149.size);
            Label _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new Label();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataException = new DataException();
          struct.dataException.read(iprot);
          struct.setDataExceptionIsSet(true);
        }
      }
    }

  }

  public static class search4Judgements_args implements org.apache.thrift.TBase<search4Judgements_args, search4Judgements_args._Fields>, java.io.Serializable, Cloneable, Comparable<search4Judgements_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search4Judgements_args");

    private static final org.apache.thrift.protocol.TField TYPE_VALUE_CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("typeValueConditions", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("countPerPage", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortType", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search4Judgements_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search4Judgements_argsTupleSchemeFactory());
    }

    public List<TypeValueCondition> typeValueConditions; // required
    public int startIndex; // required
    public int countPerPage; // required
    public int sortType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE_VALUE_CONDITIONS((short)1, "typeValueConditions"),
      START_INDEX((short)2, "startIndex"),
      COUNT_PER_PAGE((short)3, "countPerPage"),
      SORT_TYPE((short)4, "sortType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE_VALUE_CONDITIONS
            return TYPE_VALUE_CONDITIONS;
          case 2: // START_INDEX
            return START_INDEX;
          case 3: // COUNT_PER_PAGE
            return COUNT_PER_PAGE;
          case 4: // SORT_TYPE
            return SORT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTINDEX_ISSET_ID = 0;
    private static final int __COUNTPERPAGE_ISSET_ID = 1;
    private static final int __SORTTYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE_VALUE_CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("typeValueConditions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TypeValueCondition.class))));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.COUNT_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("countPerPage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sortType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search4Judgements_args.class, metaDataMap);
    }

    public search4Judgements_args() {
    }

    public search4Judgements_args(
      List<TypeValueCondition> typeValueConditions,
      int startIndex,
      int countPerPage,
      int sortType)
    {
      this();
      this.typeValueConditions = typeValueConditions;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.countPerPage = countPerPage;
      setCountPerPageIsSet(true);
      this.sortType = sortType;
      setSortTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search4Judgements_args(search4Judgements_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTypeValueConditions()) {
        List<TypeValueCondition> __this__typeValueConditions = new ArrayList<TypeValueCondition>(other.typeValueConditions.size());
        for (TypeValueCondition other_element : other.typeValueConditions) {
          __this__typeValueConditions.add(new TypeValueCondition(other_element));
        }
        this.typeValueConditions = __this__typeValueConditions;
      }
      this.startIndex = other.startIndex;
      this.countPerPage = other.countPerPage;
      this.sortType = other.sortType;
    }

    public search4Judgements_args deepCopy() {
      return new search4Judgements_args(this);
    }

    @Override
    public void clear() {
      this.typeValueConditions = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setCountPerPageIsSet(false);
      this.countPerPage = 0;
      setSortTypeIsSet(false);
      this.sortType = 0;
    }

    public int getTypeValueConditionsSize() {
      return (this.typeValueConditions == null) ? 0 : this.typeValueConditions.size();
    }

    public java.util.Iterator<TypeValueCondition> getTypeValueConditionsIterator() {
      return (this.typeValueConditions == null) ? null : this.typeValueConditions.iterator();
    }

    public void addToTypeValueConditions(TypeValueCondition elem) {
      if (this.typeValueConditions == null) {
        this.typeValueConditions = new ArrayList<TypeValueCondition>();
      }
      this.typeValueConditions.add(elem);
    }

    public List<TypeValueCondition> getTypeValueConditions() {
      return this.typeValueConditions;
    }

    public search4Judgements_args setTypeValueConditions(List<TypeValueCondition> typeValueConditions) {
      this.typeValueConditions = typeValueConditions;
      return this;
    }

    public void unsetTypeValueConditions() {
      this.typeValueConditions = null;
    }

    /** Returns true if field typeValueConditions is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeValueConditions() {
      return this.typeValueConditions != null;
    }

    public void setTypeValueConditionsIsSet(boolean value) {
      if (!value) {
        this.typeValueConditions = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public search4Judgements_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getCountPerPage() {
      return this.countPerPage;
    }

    public search4Judgements_args setCountPerPage(int countPerPage) {
      this.countPerPage = countPerPage;
      setCountPerPageIsSet(true);
      return this;
    }

    public void unsetCountPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID);
    }

    /** Returns true if field countPerPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCountPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID);
    }

    public void setCountPerPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID, value);
    }

    public int getSortType() {
      return this.sortType;
    }

    public search4Judgements_args setSortType(int sortType) {
      this.sortType = sortType;
      setSortTypeIsSet(true);
      return this;
    }

    public void unsetSortType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTTYPE_ISSET_ID);
    }

    /** Returns true if field sortType is set (has been assigned a value) and false otherwise */
    public boolean isSetSortType() {
      return EncodingUtils.testBit(__isset_bitfield, __SORTTYPE_ISSET_ID);
    }

    public void setSortTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE_VALUE_CONDITIONS:
        if (value == null) {
          unsetTypeValueConditions();
        } else {
          setTypeValueConditions((List<TypeValueCondition>)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case COUNT_PER_PAGE:
        if (value == null) {
          unsetCountPerPage();
        } else {
          setCountPerPage((Integer)value);
        }
        break;

      case SORT_TYPE:
        if (value == null) {
          unsetSortType();
        } else {
          setSortType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE_VALUE_CONDITIONS:
        return getTypeValueConditions();

      case START_INDEX:
        return Integer.valueOf(getStartIndex());

      case COUNT_PER_PAGE:
        return Integer.valueOf(getCountPerPage());

      case SORT_TYPE:
        return Integer.valueOf(getSortType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE_VALUE_CONDITIONS:
        return isSetTypeValueConditions();
      case START_INDEX:
        return isSetStartIndex();
      case COUNT_PER_PAGE:
        return isSetCountPerPage();
      case SORT_TYPE:
        return isSetSortType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search4Judgements_args)
        return this.equals((search4Judgements_args)that);
      return false;
    }

    public boolean equals(search4Judgements_args that) {
      if (that == null)
        return false;

      boolean this_present_typeValueConditions = true && this.isSetTypeValueConditions();
      boolean that_present_typeValueConditions = true && that.isSetTypeValueConditions();
      if (this_present_typeValueConditions || that_present_typeValueConditions) {
        if (!(this_present_typeValueConditions && that_present_typeValueConditions))
          return false;
        if (!this.typeValueConditions.equals(that.typeValueConditions))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_countPerPage = true;
      boolean that_present_countPerPage = true;
      if (this_present_countPerPage || that_present_countPerPage) {
        if (!(this_present_countPerPage && that_present_countPerPage))
          return false;
        if (this.countPerPage != that.countPerPage)
          return false;
      }

      boolean this_present_sortType = true;
      boolean that_present_sortType = true;
      if (this_present_sortType || that_present_sortType) {
        if (!(this_present_sortType && that_present_sortType))
          return false;
        if (this.sortType != that.sortType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_typeValueConditions = true && (isSetTypeValueConditions());
      list.add(present_typeValueConditions);
      if (present_typeValueConditions)
        list.add(typeValueConditions);

      boolean present_startIndex = true;
      list.add(present_startIndex);
      if (present_startIndex)
        list.add(startIndex);

      boolean present_countPerPage = true;
      list.add(present_countPerPage);
      if (present_countPerPage)
        list.add(countPerPage);

      boolean present_sortType = true;
      list.add(present_sortType);
      if (present_sortType)
        list.add(sortType);

      return list.hashCode();
    }

    @Override
    public int compareTo(search4Judgements_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTypeValueConditions()).compareTo(other.isSetTypeValueConditions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeValueConditions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeValueConditions, other.typeValueConditions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCountPerPage()).compareTo(other.isSetCountPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countPerPage, other.countPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSortType()).compareTo(other.isSetSortType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortType, other.sortType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search4Judgements_args(");
      boolean first = true;

      sb.append("typeValueConditions:");
      if (this.typeValueConditions == null) {
        sb.append("null");
      } else {
        sb.append(this.typeValueConditions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("countPerPage:");
      sb.append(this.countPerPage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortType:");
      sb.append(this.sortType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (typeValueConditions == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'typeValueConditions' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'startIndex' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'countPerPage' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'sortType' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search4Judgements_argsStandardSchemeFactory implements SchemeFactory {
      public search4Judgements_argsStandardScheme getScheme() {
        return new search4Judgements_argsStandardScheme();
      }
    }

    private static class search4Judgements_argsStandardScheme extends StandardScheme<search4Judgements_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search4Judgements_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE_VALUE_CONDITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.typeValueConditions = new ArrayList<TypeValueCondition>(_list152.size);
                  TypeValueCondition _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new TypeValueCondition();
                    _elem153.read(iprot);
                    struct.typeValueConditions.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setTypeValueConditionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.countPerPage = iprot.readI32();
                struct.setCountPerPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SORT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sortType = iprot.readI32();
                struct.setSortTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetStartIndex()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'startIndex' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetCountPerPage()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'countPerPage' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetSortType()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'sortType' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search4Judgements_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.typeValueConditions != null) {
          oprot.writeFieldBegin(TYPE_VALUE_CONDITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.typeValueConditions.size()));
            for (TypeValueCondition _iter155 : struct.typeValueConditions)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.countPerPage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SORT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sortType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search4Judgements_argsTupleSchemeFactory implements SchemeFactory {
      public search4Judgements_argsTupleScheme getScheme() {
        return new search4Judgements_argsTupleScheme();
      }
    }

    private static class search4Judgements_argsTupleScheme extends TupleScheme<search4Judgements_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search4Judgements_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        {
          oprot.writeI32(struct.typeValueConditions.size());
          for (TypeValueCondition _iter156 : struct.typeValueConditions)
          {
            _iter156.write(oprot);
          }
        }
        oprot.writeI32(struct.startIndex);
        oprot.writeI32(struct.countPerPage);
        oprot.writeI32(struct.sortType);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search4Judgements_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.typeValueConditions = new ArrayList<TypeValueCondition>(_list157.size);
          TypeValueCondition _elem158;
          for (int _i159 = 0; _i159 < _list157.size; ++_i159)
          {
            _elem158 = new TypeValueCondition();
            _elem158.read(iprot);
            struct.typeValueConditions.add(_elem158);
          }
        }
        struct.setTypeValueConditionsIsSet(true);
        struct.startIndex = iprot.readI32();
        struct.setStartIndexIsSet(true);
        struct.countPerPage = iprot.readI32();
        struct.setCountPerPageIsSet(true);
        struct.sortType = iprot.readI32();
        struct.setSortTypeIsSet(true);
      }
    }

  }

  public static class search4Judgements_result implements org.apache.thrift.TBase<search4Judgements_result, search4Judgements_result._Fields>, java.io.Serializable, Cloneable, Comparable<search4Judgements_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search4Judgements_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search4Judgements_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search4Judgements_resultTupleSchemeFactory());
    }

    public SearchResult success; // required
    public DataException dataException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_EXCEPTION((short)1, "dataException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_EXCEPTION
            return DATA_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchResult.class)));
      tmpMap.put(_Fields.DATA_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search4Judgements_result.class, metaDataMap);
    }

    public search4Judgements_result() {
    }

    public search4Judgements_result(
      SearchResult success,
      DataException dataException)
    {
      this();
      this.success = success;
      this.dataException = dataException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search4Judgements_result(search4Judgements_result other) {
      if (other.isSetSuccess()) {
        this.success = new SearchResult(other.success);
      }
      if (other.isSetDataException()) {
        this.dataException = new DataException(other.dataException);
      }
    }

    public search4Judgements_result deepCopy() {
      return new search4Judgements_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataException = null;
    }

    public SearchResult getSuccess() {
      return this.success;
    }

    public search4Judgements_result setSuccess(SearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataException getDataException() {
      return this.dataException;
    }

    public search4Judgements_result setDataException(DataException dataException) {
      this.dataException = dataException;
      return this;
    }

    public void unsetDataException() {
      this.dataException = null;
    }

    /** Returns true if field dataException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataException() {
      return this.dataException != null;
    }

    public void setDataExceptionIsSet(boolean value) {
      if (!value) {
        this.dataException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SearchResult)value);
        }
        break;

      case DATA_EXCEPTION:
        if (value == null) {
          unsetDataException();
        } else {
          setDataException((DataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_EXCEPTION:
        return getDataException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_EXCEPTION:
        return isSetDataException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search4Judgements_result)
        return this.equals((search4Judgements_result)that);
      return false;
    }

    public boolean equals(search4Judgements_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataException = true && this.isSetDataException();
      boolean that_present_dataException = true && that.isSetDataException();
      if (this_present_dataException || that_present_dataException) {
        if (!(this_present_dataException && that_present_dataException))
          return false;
        if (!this.dataException.equals(that.dataException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataException = true && (isSetDataException());
      list.add(present_dataException);
      if (present_dataException)
        list.add(dataException);

      return list.hashCode();
    }

    @Override
    public int compareTo(search4Judgements_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataException()).compareTo(other.isSetDataException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataException, other.dataException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search4Judgements_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataException:");
      if (this.dataException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search4Judgements_resultStandardSchemeFactory implements SchemeFactory {
      public search4Judgements_resultStandardScheme getScheme() {
        return new search4Judgements_resultStandardScheme();
      }
    }

    private static class search4Judgements_resultStandardScheme extends StandardScheme<search4Judgements_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search4Judgements_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataException = new DataException();
                struct.dataException.read(iprot);
                struct.setDataExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search4Judgements_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataException != null) {
          oprot.writeFieldBegin(DATA_EXCEPTION_FIELD_DESC);
          struct.dataException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search4Judgements_resultTupleSchemeFactory implements SchemeFactory {
      public search4Judgements_resultTupleScheme getScheme() {
        return new search4Judgements_resultTupleScheme();
      }
    }

    private static class search4Judgements_resultTupleScheme extends TupleScheme<search4Judgements_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search4Judgements_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDataException()) {
          struct.dataException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search4Judgements_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataException = new DataException();
          struct.dataException.read(iprot);
          struct.setDataExceptionIsSet(true);
        }
      }
    }

  }

  public static class getFullJudgement_args implements org.apache.thrift.TBase<getFullJudgement_args, getFullJudgement_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFullJudgement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFullJudgement_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFullJudgement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFullJudgement_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFullJudgement_args.class, metaDataMap);
    }

    public getFullJudgement_args() {
    }

    public getFullJudgement_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFullJudgement_args(getFullJudgement_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public getFullJudgement_args deepCopy() {
      return new getFullJudgement_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public getFullJudgement_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFullJudgement_args)
        return this.equals((getFullJudgement_args)that);
      return false;
    }

    public boolean equals(getFullJudgement_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFullJudgement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFullJudgement_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (id == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFullJudgement_argsStandardSchemeFactory implements SchemeFactory {
      public getFullJudgement_argsStandardScheme getScheme() {
        return new getFullJudgement_argsStandardScheme();
      }
    }

    private static class getFullJudgement_argsStandardScheme extends StandardScheme<getFullJudgement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFullJudgement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFullJudgement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFullJudgement_argsTupleSchemeFactory implements SchemeFactory {
      public getFullJudgement_argsTupleScheme getScheme() {
        return new getFullJudgement_argsTupleScheme();
      }
    }

    private static class getFullJudgement_argsTupleScheme extends TupleScheme<getFullJudgement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFullJudgement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.id);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFullJudgement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
    }

  }

  public static class getFullJudgement_result implements org.apache.thrift.TBase<getFullJudgement_result, getFullJudgement_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFullJudgement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFullJudgement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField DATA_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFullJudgement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFullJudgement_resultTupleSchemeFactory());
    }

    public FullJudgement success; // required
    public DataException dataException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      DATA_EXCEPTION((short)1, "dataException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // DATA_EXCEPTION
            return DATA_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FullJudgement.class)));
      tmpMap.put(_Fields.DATA_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("dataException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFullJudgement_result.class, metaDataMap);
    }

    public getFullJudgement_result() {
    }

    public getFullJudgement_result(
      FullJudgement success,
      DataException dataException)
    {
      this();
      this.success = success;
      this.dataException = dataException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFullJudgement_result(getFullJudgement_result other) {
      if (other.isSetSuccess()) {
        this.success = new FullJudgement(other.success);
      }
      if (other.isSetDataException()) {
        this.dataException = new DataException(other.dataException);
      }
    }

    public getFullJudgement_result deepCopy() {
      return new getFullJudgement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.dataException = null;
    }

    public FullJudgement getSuccess() {
      return this.success;
    }

    public getFullJudgement_result setSuccess(FullJudgement success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataException getDataException() {
      return this.dataException;
    }

    public getFullJudgement_result setDataException(DataException dataException) {
      this.dataException = dataException;
      return this;
    }

    public void unsetDataException() {
      this.dataException = null;
    }

    /** Returns true if field dataException is set (has been assigned a value) and false otherwise */
    public boolean isSetDataException() {
      return this.dataException != null;
    }

    public void setDataExceptionIsSet(boolean value) {
      if (!value) {
        this.dataException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FullJudgement)value);
        }
        break;

      case DATA_EXCEPTION:
        if (value == null) {
          unsetDataException();
        } else {
          setDataException((DataException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case DATA_EXCEPTION:
        return getDataException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case DATA_EXCEPTION:
        return isSetDataException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFullJudgement_result)
        return this.equals((getFullJudgement_result)that);
      return false;
    }

    public boolean equals(getFullJudgement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_dataException = true && this.isSetDataException();
      boolean that_present_dataException = true && that.isSetDataException();
      if (this_present_dataException || that_present_dataException) {
        if (!(this_present_dataException && that_present_dataException))
          return false;
        if (!this.dataException.equals(that.dataException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_dataException = true && (isSetDataException());
      list.add(present_dataException);
      if (present_dataException)
        list.add(dataException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFullJudgement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataException()).compareTo(other.isSetDataException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataException, other.dataException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFullJudgement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataException:");
      if (this.dataException == null) {
        sb.append("null");
      } else {
        sb.append(this.dataException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFullJudgement_resultStandardSchemeFactory implements SchemeFactory {
      public getFullJudgement_resultStandardScheme getScheme() {
        return new getFullJudgement_resultStandardScheme();
      }
    }

    private static class getFullJudgement_resultStandardScheme extends StandardScheme<getFullJudgement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFullJudgement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FullJudgement();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // DATA_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataException = new DataException();
                struct.dataException.read(iprot);
                struct.setDataExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFullJudgement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataException != null) {
          oprot.writeFieldBegin(DATA_EXCEPTION_FIELD_DESC);
          struct.dataException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFullJudgement_resultTupleSchemeFactory implements SchemeFactory {
      public getFullJudgement_resultTupleScheme getScheme() {
        return new getFullJudgement_resultTupleScheme();
      }
    }

    private static class getFullJudgement_resultTupleScheme extends TupleScheme<getFullJudgement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFullJudgement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetDataException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetDataException()) {
          struct.dataException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFullJudgement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FullJudgement();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataException = new DataException();
          struct.dataException.read(iprot);
          struct.setDataExceptionIsSet(true);
        }
      }
    }

  }

}
